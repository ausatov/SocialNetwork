//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Address_Cities", "Cities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SocialNetwork.DataAccess.City), "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Address), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Address_Countries", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SocialNetwork.DataAccess.Country), "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Address), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Address_PersonalInfo", "PersonalInfo", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.PersonalInfo), "Address", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Address), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Bans_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "Bans", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Ban), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Bans_Users1", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "Bans", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Ban), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Cities_Countries", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.Country), "Cities", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.City), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_FriendInvitations_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "FriendInvitations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.FriendInvitation), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_FriendInvitations_Users1", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "FriendInvitations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.FriendInvitation), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Friends_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "Friends", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Friend), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Friends_Users1", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "Friends", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Friend), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_PersonalInfo_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "PersonalInfo", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.PersonalInfo), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Status_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "Status", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Status), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_UsersXUserRoles_UserRoles", "UserRoles", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SocialNetwork.DataAccess.UserRole), "UsersXUserRoles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.UsersXUserRole), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_UsersXUserRoles_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SocialNetwork.DataAccess.User), "UsersXUserRoles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.UsersXUserRole), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_WallBoardItems_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "WallBoardItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.WallBoardItem), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_WallBoardItems_Users1", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "WallBoardItems", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.WallBoardItem), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Messages_Users", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "Message", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Message), true)]
[assembly: EdmRelationshipAttribute("SocialNetworkDBModel", "FK_Messages_Users1", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SocialNetwork.DataAccess.User), "Message", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SocialNetwork.DataAccess.Message), true)]

#endregion

namespace SocialNetwork.DataAccess
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    internal partial class SocialNetworkDBEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SocialNetworkDBEntities object using the connection string found in the 'SocialNetworkDBEntities' section of the application configuration file.
        /// </summary>
        public SocialNetworkDBEntities() : base("name=SocialNetworkDBEntities", "SocialNetworkDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SocialNetworkDBEntities object.
        /// </summary>
        public SocialNetworkDBEntities(string connectionString) : base(connectionString, "SocialNetworkDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SocialNetworkDBEntities object.
        /// </summary>
        public SocialNetworkDBEntities(EntityConnection connection) : base(connection, "SocialNetworkDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Address> Addresses
        {
            get
            {
                if ((_Addresses == null))
                {
                    _Addresses = base.CreateObjectSet<Address>("Addresses");
                }
                return _Addresses;
            }
        }
        private ObjectSet<Address> _Addresses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Ban> Bans
        {
            get
            {
                if ((_Bans == null))
                {
                    _Bans = base.CreateObjectSet<Ban>("Bans");
                }
                return _Bans;
            }
        }
        private ObjectSet<Ban> _Bans;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FriendInvitation> FriendInvitations
        {
            get
            {
                if ((_FriendInvitations == null))
                {
                    _FriendInvitations = base.CreateObjectSet<FriendInvitation>("FriendInvitations");
                }
                return _FriendInvitations;
            }
        }
        private ObjectSet<FriendInvitation> _FriendInvitations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Friend> Friends
        {
            get
            {
                if ((_Friends == null))
                {
                    _Friends = base.CreateObjectSet<Friend>("Friends");
                }
                return _Friends;
            }
        }
        private ObjectSet<Friend> _Friends;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PersonalInfo> PersonalInfoes
        {
            get
            {
                if ((_PersonalInfoes == null))
                {
                    _PersonalInfoes = base.CreateObjectSet<PersonalInfo>("PersonalInfoes");
                }
                return _PersonalInfoes;
            }
        }
        private ObjectSet<PersonalInfo> _PersonalInfoes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Status> Status
        {
            get
            {
                if ((_Status == null))
                {
                    _Status = base.CreateObjectSet<Status>("Status");
                }
                return _Status;
            }
        }
        private ObjectSet<Status> _Status;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<sysdiagram> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagram>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagram> _sysdiagrams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserRole> UserRoles
        {
            get
            {
                if ((_UserRoles == null))
                {
                    _UserRoles = base.CreateObjectSet<UserRole>("UserRoles");
                }
                return _UserRoles;
            }
        }
        private ObjectSet<UserRole> _UserRoles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UsersXUserRole> UsersXUserRoles
        {
            get
            {
                if ((_UsersXUserRoles == null))
                {
                    _UsersXUserRoles = base.CreateObjectSet<UsersXUserRole>("UsersXUserRoles");
                }
                return _UsersXUserRoles;
            }
        }
        private ObjectSet<UsersXUserRole> _UsersXUserRoles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WallBoardItem> WallBoardItems
        {
            get
            {
                if ((_WallBoardItems == null))
                {
                    _WallBoardItems = base.CreateObjectSet<WallBoardItem>("WallBoardItems");
                }
                return _WallBoardItems;
            }
        }
        private ObjectSet<WallBoardItem> _WallBoardItems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Message> Messages
        {
            get
            {
                if ((_Messages == null))
                {
                    _Messages = base.CreateObjectSet<Message>("Messages");
                }
                return _Messages;
            }
        }
        private ObjectSet<Message> _Messages;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Addresses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAddresses(Address address)
        {
            base.AddObject("Addresses", address);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Bans EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBans(Ban ban)
        {
            base.AddObject("Bans", ban);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FriendInvitations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFriendInvitations(FriendInvitation friendInvitation)
        {
            base.AddObject("FriendInvitations", friendInvitation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Friends EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFriends(Friend friend)
        {
            base.AddObject("Friends", friend);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PersonalInfoes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPersonalInfoes(PersonalInfo personalInfo)
        {
            base.AddObject("PersonalInfoes", personalInfo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Status EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStatus(Status status)
        {
            base.AddObject("Status", status);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the sysdiagrams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTosysdiagrams(sysdiagram sysdiagram)
        {
            base.AddObject("sysdiagrams", sysdiagram);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserRoles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserRoles(UserRole userRole)
        {
            base.AddObject("UserRoles", userRole);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UsersXUserRoles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsersXUserRoles(UsersXUserRole usersXUserRole)
        {
            base.AddObject("UsersXUserRoles", usersXUserRole);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WallBoardItems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWallBoardItems(WallBoardItem wallBoardItem)
        {
            base.AddObject("WallBoardItems", wallBoardItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Messages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMessages(Message message)
        {
            base.AddObject("Messages", message);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="itemID">No Metadata Documentation available.</param>
        public int spDelWallBoardItem(Nullable<global::System.Guid> itemID)
        {
            ObjectParameter itemIDParameter;
            if (itemID.HasValue)
            {
                itemIDParameter = new ObjectParameter("ItemID", itemID);
            }
            else
            {
                itemIDParameter = new ObjectParameter("ItemID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("spDelWallBoardItem", itemIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="contentTypeID">No Metadata Documentation available.</param>
        /// <param name="fromID">No Metadata Documentation available.</param>
        /// <param name="toID">No Metadata Documentation available.</param>
        /// <param name="message">No Metadata Documentation available.</param>
        public int spInsWallBoardTextMessage(Nullable<global::System.Int32> contentTypeID, Nullable<global::System.Guid> fromID, Nullable<global::System.Guid> toID, global::System.String message)
        {
            ObjectParameter contentTypeIDParameter;
            if (contentTypeID.HasValue)
            {
                contentTypeIDParameter = new ObjectParameter("ContentTypeID", contentTypeID);
            }
            else
            {
                contentTypeIDParameter = new ObjectParameter("ContentTypeID", typeof(global::System.Int32));
            }
    
            ObjectParameter fromIDParameter;
            if (fromID.HasValue)
            {
                fromIDParameter = new ObjectParameter("FromID", fromID);
            }
            else
            {
                fromIDParameter = new ObjectParameter("FromID", typeof(global::System.Guid));
            }
    
            ObjectParameter toIDParameter;
            if (toID.HasValue)
            {
                toIDParameter = new ObjectParameter("ToID", toID);
            }
            else
            {
                toIDParameter = new ObjectParameter("ToID", typeof(global::System.Guid));
            }
    
            ObjectParameter messageParameter;
            if (message != null)
            {
                messageParameter = new ObjectParameter("Message", message);
            }
            else
            {
                messageParameter = new ObjectParameter("Message", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("spInsWallBoardTextMessage", contentTypeIDParameter, fromIDParameter, toIDParameter, messageParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userID">No Metadata Documentation available.</param>
        /// <param name="message">No Metadata Documentation available.</param>
        /// <param name="statusID">No Metadata Documentation available.</param>
        public int spInsStatus(Nullable<global::System.Guid> userID, global::System.String message, Nullable<global::System.Int32> statusID)
        {
            ObjectParameter userIDParameter;
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("UserID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("UserID", typeof(global::System.Guid));
            }
    
            ObjectParameter messageParameter;
            if (message != null)
            {
                messageParameter = new ObjectParameter("Message", message);
            }
            else
            {
                messageParameter = new ObjectParameter("Message", typeof(global::System.String));
            }
    
            ObjectParameter statusIDParameter;
            if (statusID.HasValue)
            {
                statusIDParameter = new ObjectParameter("StatusID", statusID);
            }
            else
            {
                statusIDParameter = new ObjectParameter("StatusID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("spInsStatus", userIDParameter, messageParameter, statusIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="itemID">No Metadata Documentation available.</param>
        public int spDelBanItem(Nullable<global::System.Guid> itemID)
        {
            ObjectParameter itemIDParameter;
            if (itemID.HasValue)
            {
                itemIDParameter = new ObjectParameter("ItemID", itemID);
            }
            else
            {
                itemIDParameter = new ObjectParameter("ItemID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("spDelBanItem", itemIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userID">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> spSelectRole(Nullable<global::System.Guid> userID)
        {
            ObjectParameter userIDParameter;
            if (userID.HasValue)
            {
                userIDParameter = new ObjectParameter("userID", userID);
            }
            else
            {
                userIDParameter = new ObjectParameter("userID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("spSelectRole", userIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="banID">No Metadata Documentation available.</param>
        /// <param name="reason">No Metadata Documentation available.</param>
        /// <param name="todate">No Metadata Documentation available.</param>
        public int spUpdBan(Nullable<global::System.Guid> banID, global::System.String reason, Nullable<global::System.DateTime> todate)
        {
            ObjectParameter banIDParameter;
            if (banID.HasValue)
            {
                banIDParameter = new ObjectParameter("banID", banID);
            }
            else
            {
                banIDParameter = new ObjectParameter("banID", typeof(global::System.Guid));
            }
    
            ObjectParameter reasonParameter;
            if (reason != null)
            {
                reasonParameter = new ObjectParameter("reason", reason);
            }
            else
            {
                reasonParameter = new ObjectParameter("reason", typeof(global::System.String));
            }
    
            ObjectParameter todateParameter;
            if (todate.HasValue)
            {
                todateParameter = new ObjectParameter("todate", todate);
            }
            else
            {
                todateParameter = new ObjectParameter("todate", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("spUpdBan", banIDParameter, reasonParameter, todateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="banID">No Metadata Documentation available.</param>
        public int spDelBan(Nullable<global::System.Guid> banID)
        {
            ObjectParameter banIDParameter;
            if (banID.HasValue)
            {
                banIDParameter = new ObjectParameter("banID", banID);
            }
            else
            {
                banIDParameter = new ObjectParameter("banID", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("spDelBan", banIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pkID">No Metadata Documentation available.</param>
        /// <param name="updateByUserInfo">No Metadata Documentation available.</param>
        /// <param name="fkUserInfoID">No Metadata Documentation available.</param>
        /// <param name="fkCountryID">No Metadata Documentation available.</param>
        /// <param name="fkCityID">No Metadata Documentation available.</param>
        /// <param name="area">No Metadata Documentation available.</param>
        /// <param name="street">No Metadata Documentation available.</param>
        /// <param name="home">No Metadata Documentation available.</param>
        /// <param name="apartment">No Metadata Documentation available.</param>
        /// <param name="isDeleted">No Metadata Documentation available.</param>
        public int spAddress(ObjectParameter pkID, Nullable<global::System.Boolean> updateByUserInfo, Nullable<global::System.Guid> fkUserInfoID, Nullable<global::System.Guid> fkCountryID, Nullable<global::System.Guid> fkCityID, global::System.String area, global::System.String street, global::System.String home, global::System.String apartment, Nullable<global::System.Boolean> isDeleted)
        {
            ObjectParameter updateByUserInfoParameter;
            if (updateByUserInfo.HasValue)
            {
                updateByUserInfoParameter = new ObjectParameter("updateByUserInfo", updateByUserInfo);
            }
            else
            {
                updateByUserInfoParameter = new ObjectParameter("updateByUserInfo", typeof(global::System.Boolean));
            }
    
            ObjectParameter fkUserInfoIDParameter;
            if (fkUserInfoID.HasValue)
            {
                fkUserInfoIDParameter = new ObjectParameter("fkUserInfoID", fkUserInfoID);
            }
            else
            {
                fkUserInfoIDParameter = new ObjectParameter("fkUserInfoID", typeof(global::System.Guid));
            }
    
            ObjectParameter fkCountryIDParameter;
            if (fkCountryID.HasValue)
            {
                fkCountryIDParameter = new ObjectParameter("fkCountryID", fkCountryID);
            }
            else
            {
                fkCountryIDParameter = new ObjectParameter("fkCountryID", typeof(global::System.Guid));
            }
    
            ObjectParameter fkCityIDParameter;
            if (fkCityID.HasValue)
            {
                fkCityIDParameter = new ObjectParameter("fkCityID", fkCityID);
            }
            else
            {
                fkCityIDParameter = new ObjectParameter("fkCityID", typeof(global::System.Guid));
            }
    
            ObjectParameter areaParameter;
            if (area != null)
            {
                areaParameter = new ObjectParameter("area", area);
            }
            else
            {
                areaParameter = new ObjectParameter("area", typeof(global::System.String));
            }
    
            ObjectParameter streetParameter;
            if (street != null)
            {
                streetParameter = new ObjectParameter("street", street);
            }
            else
            {
                streetParameter = new ObjectParameter("street", typeof(global::System.String));
            }
    
            ObjectParameter homeParameter;
            if (home != null)
            {
                homeParameter = new ObjectParameter("home", home);
            }
            else
            {
                homeParameter = new ObjectParameter("home", typeof(global::System.String));
            }
    
            ObjectParameter apartmentParameter;
            if (apartment != null)
            {
                apartmentParameter = new ObjectParameter("apartment", apartment);
            }
            else
            {
                apartmentParameter = new ObjectParameter("apartment", typeof(global::System.String));
            }
    
            ObjectParameter isDeletedParameter;
            if (isDeleted.HasValue)
            {
                isDeletedParameter = new ObjectParameter("isDeleted", isDeleted);
            }
            else
            {
                isDeletedParameter = new ObjectParameter("isDeleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("spAddress", pkID, updateByUserInfoParameter, fkUserInfoIDParameter, fkCountryIDParameter, fkCityIDParameter, areaParameter, streetParameter, homeParameter, apartmentParameter, isDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pkID">No Metadata Documentation available.</param>
        /// <param name="updateByUser">No Metadata Documentation available.</param>
        /// <param name="updateImgPath">No Metadata Documentation available.</param>
        /// <param name="fkUserID">No Metadata Documentation available.</param>
        /// <param name="nickName">No Metadata Documentation available.</param>
        /// <param name="firstName">No Metadata Documentation available.</param>
        /// <param name="lastName">No Metadata Documentation available.</param>
        /// <param name="middleName">No Metadata Documentation available.</param>
        /// <param name="sex">No Metadata Documentation available.</param>
        /// <param name="phone">No Metadata Documentation available.</param>
        /// <param name="birthday">No Metadata Documentation available.</param>
        /// <param name="imagePath">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        public int spPersonalInfo(ObjectParameter pkID, Nullable<global::System.Boolean> updateByUser, Nullable<global::System.Boolean> updateImgPath, Nullable<global::System.Guid> fkUserID, global::System.String nickName, global::System.String firstName, global::System.String lastName, global::System.String middleName, Nullable<global::System.Byte> sex, global::System.String phone, Nullable<global::System.DateTime> birthday, global::System.String imagePath, global::System.String description)
        {
            ObjectParameter updateByUserParameter;
            if (updateByUser.HasValue)
            {
                updateByUserParameter = new ObjectParameter("updateByUser", updateByUser);
            }
            else
            {
                updateByUserParameter = new ObjectParameter("updateByUser", typeof(global::System.Boolean));
            }
    
            ObjectParameter updateImgPathParameter;
            if (updateImgPath.HasValue)
            {
                updateImgPathParameter = new ObjectParameter("updateImgPath", updateImgPath);
            }
            else
            {
                updateImgPathParameter = new ObjectParameter("updateImgPath", typeof(global::System.Boolean));
            }
    
            ObjectParameter fkUserIDParameter;
            if (fkUserID.HasValue)
            {
                fkUserIDParameter = new ObjectParameter("fkUserID", fkUserID);
            }
            else
            {
                fkUserIDParameter = new ObjectParameter("fkUserID", typeof(global::System.Guid));
            }
    
            ObjectParameter nickNameParameter;
            if (nickName != null)
            {
                nickNameParameter = new ObjectParameter("nickName", nickName);
            }
            else
            {
                nickNameParameter = new ObjectParameter("nickName", typeof(global::System.String));
            }
    
            ObjectParameter firstNameParameter;
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("firstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("firstName", typeof(global::System.String));
            }
    
            ObjectParameter lastNameParameter;
            if (lastName != null)
            {
                lastNameParameter = new ObjectParameter("lastName", lastName);
            }
            else
            {
                lastNameParameter = new ObjectParameter("lastName", typeof(global::System.String));
            }
    
            ObjectParameter middleNameParameter;
            if (middleName != null)
            {
                middleNameParameter = new ObjectParameter("middleName", middleName);
            }
            else
            {
                middleNameParameter = new ObjectParameter("middleName", typeof(global::System.String));
            }
    
            ObjectParameter sexParameter;
            if (sex.HasValue)
            {
                sexParameter = new ObjectParameter("sex", sex);
            }
            else
            {
                sexParameter = new ObjectParameter("sex", typeof(global::System.Byte));
            }
    
            ObjectParameter phoneParameter;
            if (phone != null)
            {
                phoneParameter = new ObjectParameter("phone", phone);
            }
            else
            {
                phoneParameter = new ObjectParameter("phone", typeof(global::System.String));
            }
    
            ObjectParameter birthdayParameter;
            if (birthday.HasValue)
            {
                birthdayParameter = new ObjectParameter("birthday", birthday);
            }
            else
            {
                birthdayParameter = new ObjectParameter("birthday", typeof(global::System.DateTime));
            }
    
            ObjectParameter imagePathParameter;
            if (imagePath != null)
            {
                imagePathParameter = new ObjectParameter("imagePath", imagePath);
            }
            else
            {
                imagePathParameter = new ObjectParameter("imagePath", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("description", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("spPersonalInfo", pkID, updateByUserParameter, updateImgPathParameter, fkUserIDParameter, nickNameParameter, firstNameParameter, lastNameParameter, middleNameParameter, sexParameter, phoneParameter, birthdayParameter, imagePathParameter, descriptionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pkMessageID">No Metadata Documentation available.</param>
        /// <param name="fkFromID">No Metadata Documentation available.</param>
        /// <param name="fkToID">No Metadata Documentation available.</param>
        /// <param name="header">No Metadata Documentation available.</param>
        /// <param name="text">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        /// <param name="isDeletedBySender">No Metadata Documentation available.</param>
        /// <param name="isDeletedByReceiver">No Metadata Documentation available.</param>
        public int spMessage(ObjectParameter pkMessageID, Nullable<global::System.Guid> fkFromID, Nullable<global::System.Guid> fkToID, global::System.String header, global::System.String text, Nullable<global::System.Boolean> status, Nullable<global::System.Boolean> isDeletedBySender, Nullable<global::System.Boolean> isDeletedByReceiver)
        {
            ObjectParameter fkFromIDParameter;
            if (fkFromID.HasValue)
            {
                fkFromIDParameter = new ObjectParameter("fkFromID", fkFromID);
            }
            else
            {
                fkFromIDParameter = new ObjectParameter("fkFromID", typeof(global::System.Guid));
            }
    
            ObjectParameter fkToIDParameter;
            if (fkToID.HasValue)
            {
                fkToIDParameter = new ObjectParameter("fkToID", fkToID);
            }
            else
            {
                fkToIDParameter = new ObjectParameter("fkToID", typeof(global::System.Guid));
            }
    
            ObjectParameter headerParameter;
            if (header != null)
            {
                headerParameter = new ObjectParameter("header", header);
            }
            else
            {
                headerParameter = new ObjectParameter("header", typeof(global::System.String));
            }
    
            ObjectParameter textParameter;
            if (text != null)
            {
                textParameter = new ObjectParameter("text", text);
            }
            else
            {
                textParameter = new ObjectParameter("text", typeof(global::System.String));
            }
    
            ObjectParameter statusParameter;
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("status", typeof(global::System.Boolean));
            }
    
            ObjectParameter isDeletedBySenderParameter;
            if (isDeletedBySender.HasValue)
            {
                isDeletedBySenderParameter = new ObjectParameter("isDeletedBySender", isDeletedBySender);
            }
            else
            {
                isDeletedBySenderParameter = new ObjectParameter("isDeletedBySender", typeof(global::System.Boolean));
            }
    
            ObjectParameter isDeletedByReceiverParameter;
            if (isDeletedByReceiver.HasValue)
            {
                isDeletedByReceiverParameter = new ObjectParameter("isDeletedByReceiver", isDeletedByReceiver);
            }
            else
            {
                isDeletedByReceiverParameter = new ObjectParameter("isDeletedByReceiver", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("spMessage", pkMessageID, fkFromIDParameter, fkToIDParameter, headerParameter, textParameter, statusParameter, isDeletedBySenderParameter, isDeletedByReceiverParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pkUserID">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="sqID">No Metadata Documentation available.</param>
        /// <param name="sqResponse">No Metadata Documentation available.</param>
        /// <param name="regDate">No Metadata Documentation available.</param>
        /// <param name="lastLoginDate">No Metadata Documentation available.</param>
        /// <param name="isDeleted">No Metadata Documentation available.</param>
        public int spUser(ObjectParameter pkUserID, global::System.String password, global::System.String email, Nullable<global::System.Int32> sqID, global::System.String sqResponse, Nullable<global::System.DateTime> regDate, Nullable<global::System.DateTime> lastLoginDate, Nullable<global::System.Boolean> isDeleted)
        {
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("password", typeof(global::System.String));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("email", typeof(global::System.String));
            }
    
            ObjectParameter sqIDParameter;
            if (sqID.HasValue)
            {
                sqIDParameter = new ObjectParameter("sqID", sqID);
            }
            else
            {
                sqIDParameter = new ObjectParameter("sqID", typeof(global::System.Int32));
            }
    
            ObjectParameter sqResponseParameter;
            if (sqResponse != null)
            {
                sqResponseParameter = new ObjectParameter("sqResponse", sqResponse);
            }
            else
            {
                sqResponseParameter = new ObjectParameter("sqResponse", typeof(global::System.String));
            }
    
            ObjectParameter regDateParameter;
            if (regDate.HasValue)
            {
                regDateParameter = new ObjectParameter("regDate", regDate);
            }
            else
            {
                regDateParameter = new ObjectParameter("regDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter lastLoginDateParameter;
            if (lastLoginDate.HasValue)
            {
                lastLoginDateParameter = new ObjectParameter("lastLoginDate", lastLoginDate);
            }
            else
            {
                lastLoginDateParameter = new ObjectParameter("lastLoginDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter isDeletedParameter;
            if (isDeleted.HasValue)
            {
                isDeletedParameter = new ObjectParameter("isDeleted", isDeleted);
            }
            else
            {
                isDeletedParameter = new ObjectParameter("isDeleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("spUser", pkUserID, passwordParameter, emailParameter, sqIDParameter, sqResponseParameter, regDateParameter, lastLoginDateParameter, isDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pkID">No Metadata Documentation available.</param>
        /// <param name="fkUserID">No Metadata Documentation available.</param>
        /// <param name="privelegeMask">No Metadata Documentation available.</param>
        /// <param name="roleName">No Metadata Documentation available.</param>
        /// <param name="delete">No Metadata Documentation available.</param>
        public int spRole(ObjectParameter pkID, Nullable<global::System.Guid> fkUserID, Nullable<global::System.Byte> privelegeMask, global::System.String roleName, Nullable<global::System.Boolean> delete)
        {
            ObjectParameter fkUserIDParameter;
            if (fkUserID.HasValue)
            {
                fkUserIDParameter = new ObjectParameter("fkUserID", fkUserID);
            }
            else
            {
                fkUserIDParameter = new ObjectParameter("fkUserID", typeof(global::System.Guid));
            }
    
            ObjectParameter privelegeMaskParameter;
            if (privelegeMask.HasValue)
            {
                privelegeMaskParameter = new ObjectParameter("privelegeMask", privelegeMask);
            }
            else
            {
                privelegeMaskParameter = new ObjectParameter("privelegeMask", typeof(global::System.Byte));
            }
    
            ObjectParameter roleNameParameter;
            if (roleName != null)
            {
                roleNameParameter = new ObjectParameter("roleName", roleName);
            }
            else
            {
                roleNameParameter = new ObjectParameter("roleName", typeof(global::System.String));
            }
    
            ObjectParameter deleteParameter;
            if (delete.HasValue)
            {
                deleteParameter = new ObjectParameter("delete", delete);
            }
            else
            {
                deleteParameter = new ObjectParameter("delete", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("spRole", pkID, fkUserIDParameter, privelegeMaskParameter, roleNameParameter, deleteParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pkID">No Metadata Documentation available.</param>
        /// <param name="updateByUserInfo">No Metadata Documentation available.</param>
        /// <param name="fkFromID">No Metadata Documentation available.</param>
        /// <param name="fkToID">No Metadata Documentation available.</param>
        /// <param name="message">No Metadata Documentation available.</param>
        /// <param name="createDate">No Metadata Documentation available.</param>
        /// <param name="isDeleted">No Metadata Documentation available.</param>
        public int spFriendInvitation(ObjectParameter pkID, Nullable<global::System.Boolean> updateByUserInfo, Nullable<global::System.Guid> fkFromID, Nullable<global::System.Guid> fkToID, global::System.String message, Nullable<global::System.DateTime> createDate, Nullable<global::System.Boolean> isDeleted)
        {
            ObjectParameter updateByUserInfoParameter;
            if (updateByUserInfo.HasValue)
            {
                updateByUserInfoParameter = new ObjectParameter("updateByUserInfo", updateByUserInfo);
            }
            else
            {
                updateByUserInfoParameter = new ObjectParameter("updateByUserInfo", typeof(global::System.Boolean));
            }
    
            ObjectParameter fkFromIDParameter;
            if (fkFromID.HasValue)
            {
                fkFromIDParameter = new ObjectParameter("fkFromID", fkFromID);
            }
            else
            {
                fkFromIDParameter = new ObjectParameter("fkFromID", typeof(global::System.Guid));
            }
    
            ObjectParameter fkToIDParameter;
            if (fkToID.HasValue)
            {
                fkToIDParameter = new ObjectParameter("fkToID", fkToID);
            }
            else
            {
                fkToIDParameter = new ObjectParameter("fkToID", typeof(global::System.Guid));
            }
    
            ObjectParameter messageParameter;
            if (message != null)
            {
                messageParameter = new ObjectParameter("message", message);
            }
            else
            {
                messageParameter = new ObjectParameter("message", typeof(global::System.String));
            }
    
            ObjectParameter createDateParameter;
            if (createDate.HasValue)
            {
                createDateParameter = new ObjectParameter("createDate", createDate);
            }
            else
            {
                createDateParameter = new ObjectParameter("createDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter isDeletedParameter;
            if (isDeleted.HasValue)
            {
                isDeletedParameter = new ObjectParameter("isDeleted", isDeleted);
            }
            else
            {
                isDeletedParameter = new ObjectParameter("isDeleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("spFriendInvitation", pkID, updateByUserInfoParameter, fkFromIDParameter, fkToIDParameter, messageParameter, createDateParameter, isDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pkID">No Metadata Documentation available.</param>
        /// <param name="updateByUserInfo">No Metadata Documentation available.</param>
        /// <param name="fkUserID">No Metadata Documentation available.</param>
        /// <param name="fkFriendID">No Metadata Documentation available.</param>
        /// <param name="friendshipDate">No Metadata Documentation available.</param>
        /// <param name="isDeleted">No Metadata Documentation available.</param>
        public int spFriend(ObjectParameter pkID, Nullable<global::System.Boolean> updateByUserInfo, Nullable<global::System.Guid> fkUserID, Nullable<global::System.Guid> fkFriendID, Nullable<global::System.DateTime> friendshipDate, Nullable<global::System.Boolean> isDeleted)
        {
            ObjectParameter updateByUserInfoParameter;
            if (updateByUserInfo.HasValue)
            {
                updateByUserInfoParameter = new ObjectParameter("updateByUserInfo", updateByUserInfo);
            }
            else
            {
                updateByUserInfoParameter = new ObjectParameter("updateByUserInfo", typeof(global::System.Boolean));
            }
    
            ObjectParameter fkUserIDParameter;
            if (fkUserID.HasValue)
            {
                fkUserIDParameter = new ObjectParameter("fkUserID", fkUserID);
            }
            else
            {
                fkUserIDParameter = new ObjectParameter("fkUserID", typeof(global::System.Guid));
            }
    
            ObjectParameter fkFriendIDParameter;
            if (fkFriendID.HasValue)
            {
                fkFriendIDParameter = new ObjectParameter("fkFriendID", fkFriendID);
            }
            else
            {
                fkFriendIDParameter = new ObjectParameter("fkFriendID", typeof(global::System.Guid));
            }
    
            ObjectParameter friendshipDateParameter;
            if (friendshipDate.HasValue)
            {
                friendshipDateParameter = new ObjectParameter("friendshipDate", friendshipDate);
            }
            else
            {
                friendshipDateParameter = new ObjectParameter("friendshipDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter isDeletedParameter;
            if (isDeleted.HasValue)
            {
                isDeletedParameter = new ObjectParameter("isDeleted", isDeleted);
            }
            else
            {
                isDeletedParameter = new ObjectParameter("isDeleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("spFriend", pkID, updateByUserInfoParameter, fkUserIDParameter, fkFriendIDParameter, friendshipDateParameter, isDeletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="pkID">No Metadata Documentation available.</param>
        /// <param name="updateByUserInfo">No Metadata Documentation available.</param>
        /// <param name="fkUserID">No Metadata Documentation available.</param>
        /// <param name="fkAdminID">No Metadata Documentation available.</param>
        /// <param name="reason">No Metadata Documentation available.</param>
        /// <param name="fromDate">No Metadata Documentation available.</param>
        /// <param name="toDate">No Metadata Documentation available.</param>
        /// <param name="isDeleted">No Metadata Documentation available.</param>
        public int spBan(ObjectParameter pkID, Nullable<global::System.Boolean> updateByUserInfo, Nullable<global::System.Guid> fkUserID, Nullable<global::System.Guid> fkAdminID, global::System.String reason, Nullable<global::System.DateTime> fromDate, Nullable<global::System.DateTime> toDate, Nullable<global::System.Boolean> isDeleted)
        {
            ObjectParameter updateByUserInfoParameter;
            if (updateByUserInfo.HasValue)
            {
                updateByUserInfoParameter = new ObjectParameter("updateByUserInfo", updateByUserInfo);
            }
            else
            {
                updateByUserInfoParameter = new ObjectParameter("updateByUserInfo", typeof(global::System.Boolean));
            }
    
            ObjectParameter fkUserIDParameter;
            if (fkUserID.HasValue)
            {
                fkUserIDParameter = new ObjectParameter("fkUserID", fkUserID);
            }
            else
            {
                fkUserIDParameter = new ObjectParameter("fkUserID", typeof(global::System.Guid));
            }
    
            ObjectParameter fkAdminIDParameter;
            if (fkAdminID.HasValue)
            {
                fkAdminIDParameter = new ObjectParameter("fkAdminID", fkAdminID);
            }
            else
            {
                fkAdminIDParameter = new ObjectParameter("fkAdminID", typeof(global::System.Guid));
            }
    
            ObjectParameter reasonParameter;
            if (reason != null)
            {
                reasonParameter = new ObjectParameter("reason", reason);
            }
            else
            {
                reasonParameter = new ObjectParameter("reason", typeof(global::System.String));
            }
    
            ObjectParameter fromDateParameter;
            if (fromDate.HasValue)
            {
                fromDateParameter = new ObjectParameter("fromDate", fromDate);
            }
            else
            {
                fromDateParameter = new ObjectParameter("fromDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter toDateParameter;
            if (toDate.HasValue)
            {
                toDateParameter = new ObjectParameter("toDate", toDate);
            }
            else
            {
                toDateParameter = new ObjectParameter("toDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter isDeletedParameter;
            if (isDeleted.HasValue)
            {
                isDeletedParameter = new ObjectParameter("isDeleted", isDeleted);
            }
            else
            {
                isDeletedParameter = new ObjectParameter("isDeleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction("spBan", pkID, updateByUserInfoParameter, fkUserIDParameter, fkAdminIDParameter, reasonParameter, fromDateParameter, toDateParameter, isDeletedParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="Address")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Address : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Address object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="userInfoID">Initial value of the UserInfoID property.</param>
        /// <param name="isDeleted">Initial value of the IsDeleted property.</param>
        public static Address CreateAddress(global::System.Guid id, global::System.Guid userInfoID, global::System.Boolean isDeleted)
        {
            Address address = new Address();
            address.ID = id;
            address.UserInfoID = userInfoID;
            address.IsDeleted = isDeleted;
            return address;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserInfoID
        {
            get
            {
                return _UserInfoID;
            }
            set
            {
                OnUserInfoIDChanging(value);
                ReportPropertyChanging("UserInfoID");
                _UserInfoID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserInfoID");
                OnUserInfoIDChanged();
            }
        }
        private global::System.Guid _UserInfoID;
        partial void OnUserInfoIDChanging(global::System.Guid value);
        partial void OnUserInfoIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                OnCountryIDChanging(value);
                ReportPropertyChanging("CountryID");
                _CountryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountryID");
                OnCountryIDChanged();
            }
        }
        private Nullable<global::System.Guid> _CountryID;
        partial void OnCountryIDChanging(Nullable<global::System.Guid> value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> CityID
        {
            get
            {
                return _CityID;
            }
            set
            {
                OnCityIDChanging(value);
                ReportPropertyChanging("CityID");
                _CityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CityID");
                OnCityIDChanged();
            }
        }
        private Nullable<global::System.Guid> _CityID;
        partial void OnCityIDChanging(Nullable<global::System.Guid> value);
        partial void OnCityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Area
        {
            get
            {
                return _Area;
            }
            set
            {
                OnAreaChanging(value);
                ReportPropertyChanging("Area");
                _Area = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Area");
                OnAreaChanged();
            }
        }
        private global::System.String _Area;
        partial void OnAreaChanging(global::System.String value);
        partial void OnAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Home
        {
            get
            {
                return _Home;
            }
            set
            {
                OnHomeChanging(value);
                ReportPropertyChanging("Home");
                _Home = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Home");
                OnHomeChanged();
            }
        }
        private global::System.String _Home;
        partial void OnHomeChanging(global::System.String value);
        partial void OnHomeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Apartment
        {
            get
            {
                return _Apartment;
            }
            set
            {
                OnApartmentChanging(value);
                ReportPropertyChanging("Apartment");
                _Apartment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Apartment");
                OnApartmentChanged();
            }
        }
        private global::System.String _Apartment;
        partial void OnApartmentChanging(global::System.String value);
        partial void OnApartmentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Address_Cities", "Cities")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SocialNetworkDBModel.FK_Address_Cities", "Cities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SocialNetworkDBModel.FK_Address_Cities", "Cities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SocialNetworkDBModel.FK_Address_Cities", "Cities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("SocialNetworkDBModel.FK_Address_Cities", "Cities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Address_Countries", "Countries")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SocialNetworkDBModel.FK_Address_Countries", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SocialNetworkDBModel.FK_Address_Countries", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SocialNetworkDBModel.FK_Address_Countries", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("SocialNetworkDBModel.FK_Address_Countries", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Address_PersonalInfo", "PersonalInfo")]
        public PersonalInfo PersonalInfo
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PersonalInfo>("SocialNetworkDBModel.FK_Address_PersonalInfo", "PersonalInfo").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PersonalInfo>("SocialNetworkDBModel.FK_Address_PersonalInfo", "PersonalInfo").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PersonalInfo> PersonalInfoReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PersonalInfo>("SocialNetworkDBModel.FK_Address_PersonalInfo", "PersonalInfo");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PersonalInfo>("SocialNetworkDBModel.FK_Address_PersonalInfo", "PersonalInfo", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="Ban")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Ban : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Ban object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="userID">Initial value of the UserID property.</param>
        /// <param name="adminID">Initial value of the AdminID property.</param>
        /// <param name="fromDate">Initial value of the FromDate property.</param>
        /// <param name="toDate">Initial value of the ToDate property.</param>
        /// <param name="isDeleted">Initial value of the IsDeleted property.</param>
        public static Ban CreateBan(global::System.Guid id, global::System.Guid userID, global::System.Guid adminID, global::System.DateTime fromDate, global::System.DateTime toDate, global::System.Boolean isDeleted)
        {
            Ban ban = new Ban();
            ban.ID = id;
            ban.UserID = userID;
            ban.AdminID = adminID;
            ban.FromDate = fromDate;
            ban.ToDate = toDate;
            ban.IsDeleted = isDeleted;
            return ban;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private global::System.Guid _UserID;
        partial void OnUserIDChanging(global::System.Guid value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AdminID
        {
            get
            {
                return _AdminID;
            }
            set
            {
                OnAdminIDChanging(value);
                ReportPropertyChanging("AdminID");
                _AdminID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AdminID");
                OnAdminIDChanged();
            }
        }
        private global::System.Guid _AdminID;
        partial void OnAdminIDChanging(global::System.Guid value);
        partial void OnAdminIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Reason
        {
            get
            {
                return _Reason;
            }
            set
            {
                OnReasonChanging(value);
                ReportPropertyChanging("Reason");
                _Reason = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Reason");
                OnReasonChanged();
            }
        }
        private global::System.String _Reason;
        partial void OnReasonChanging(global::System.String value);
        partial void OnReasonChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FromDate
        {
            get
            {
                return _FromDate;
            }
            set
            {
                OnFromDateChanging(value);
                ReportPropertyChanging("FromDate");
                _FromDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromDate");
                OnFromDateChanged();
            }
        }
        private global::System.DateTime _FromDate;
        partial void OnFromDateChanging(global::System.DateTime value);
        partial void OnFromDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ToDate
        {
            get
            {
                return _ToDate;
            }
            set
            {
                OnToDateChanging(value);
                ReportPropertyChanging("ToDate");
                _ToDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToDate");
                OnToDateChanged();
            }
        }
        private global::System.DateTime _ToDate;
        partial void OnToDateChanging(global::System.DateTime value);
        partial void OnToDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Bans_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Bans_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Bans_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Bans_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_Bans_Users", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Bans_Users1", "Users")]
        public User User1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Bans_Users1", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Bans_Users1", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> User1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Bans_Users1", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_Bans_Users1", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="cityID">Initial value of the CityID property.</param>
        /// <param name="countryID">Initial value of the CountryID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static City CreateCity(global::System.Guid cityID, global::System.Guid countryID, global::System.String name)
        {
            City city = new City();
            city.CityID = cityID;
            city.CountryID = countryID;
            city.Name = name;
            return city;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CityID
        {
            get
            {
                return _CityID;
            }
            set
            {
                if (_CityID != value)
                {
                    OnCityIDChanging(value);
                    ReportPropertyChanging("CityID");
                    _CityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CityID");
                    OnCityIDChanged();
                }
            }
        }
        private global::System.Guid _CityID;
        partial void OnCityIDChanging(global::System.Guid value);
        partial void OnCityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                OnCountryIDChanging(value);
                ReportPropertyChanging("CountryID");
                _CountryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountryID");
                OnCountryIDChanged();
            }
        }
        private global::System.Guid _CountryID;
        partial void OnCountryIDChanging(global::System.Guid value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Address_Cities", "Address")]
        public EntityCollection<Address> Addresses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Address>("SocialNetworkDBModel.FK_Address_Cities", "Address");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Address>("SocialNetworkDBModel.FK_Address_Cities", "Address", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Cities_Countries", "Countries")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SocialNetworkDBModel.FK_Cities_Countries", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SocialNetworkDBModel.FK_Cities_Countries", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SocialNetworkDBModel.FK_Cities_Countries", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("SocialNetworkDBModel.FK_Cities_Countries", "Countries", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="countryID">Initial value of the CountryID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Country CreateCountry(global::System.Guid countryID, global::System.String name)
        {
            Country country = new Country();
            country.CountryID = countryID;
            country.Name = name;
            return country;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Guid _CountryID;
        partial void OnCountryIDChanging(global::System.Guid value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Address_Countries", "Address")]
        public EntityCollection<Address> Addresses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Address>("SocialNetworkDBModel.FK_Address_Countries", "Address");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Address>("SocialNetworkDBModel.FK_Address_Countries", "Address", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Cities_Countries", "Cities")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("SocialNetworkDBModel.FK_Cities_Countries", "Cities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("SocialNetworkDBModel.FK_Cities_Countries", "Cities", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="Friend")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Friend : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Friend object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="userID">Initial value of the UserID property.</param>
        /// <param name="friendID">Initial value of the FriendID property.</param>
        /// <param name="friendshipDate">Initial value of the FriendshipDate property.</param>
        /// <param name="isDeleted">Initial value of the IsDeleted property.</param>
        public static Friend CreateFriend(global::System.Guid id, global::System.Guid userID, global::System.Guid friendID, global::System.DateTime friendshipDate, global::System.Boolean isDeleted)
        {
            Friend friend = new Friend();
            friend.ID = id;
            friend.UserID = userID;
            friend.FriendID = friendID;
            friend.FriendshipDate = friendshipDate;
            friend.IsDeleted = isDeleted;
            return friend;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private global::System.Guid _UserID;
        partial void OnUserIDChanging(global::System.Guid value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid FriendID
        {
            get
            {
                return _FriendID;
            }
            set
            {
                OnFriendIDChanging(value);
                ReportPropertyChanging("FriendID");
                _FriendID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FriendID");
                OnFriendIDChanged();
            }
        }
        private global::System.Guid _FriendID;
        partial void OnFriendIDChanging(global::System.Guid value);
        partial void OnFriendIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FriendshipDate
        {
            get
            {
                return _FriendshipDate;
            }
            set
            {
                OnFriendshipDateChanging(value);
                ReportPropertyChanging("FriendshipDate");
                _FriendshipDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FriendshipDate");
                OnFriendshipDateChanged();
            }
        }
        private global::System.DateTime _FriendshipDate;
        partial void OnFriendshipDateChanging(global::System.DateTime value);
        partial void OnFriendshipDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Friends_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Friends_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Friends_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Friends_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_Friends_Users", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Friends_Users1", "Users")]
        public User User1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Friends_Users1", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Friends_Users1", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> User1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Friends_Users1", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_Friends_Users1", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="FriendInvitation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FriendInvitation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FriendInvitation object.
        /// </summary>
        /// <param name="invitationID">Initial value of the InvitationID property.</param>
        /// <param name="fromID">Initial value of the FromID property.</param>
        /// <param name="toID">Initial value of the ToID property.</param>
        /// <param name="message">Initial value of the Message property.</param>
        /// <param name="createDate">Initial value of the CreateDate property.</param>
        /// <param name="isDeleted">Initial value of the IsDeleted property.</param>
        public static FriendInvitation CreateFriendInvitation(global::System.Guid invitationID, global::System.Guid fromID, global::System.Guid toID, global::System.String message, global::System.DateTime createDate, global::System.Boolean isDeleted)
        {
            FriendInvitation friendInvitation = new FriendInvitation();
            friendInvitation.InvitationID = invitationID;
            friendInvitation.FromID = fromID;
            friendInvitation.ToID = toID;
            friendInvitation.Message = message;
            friendInvitation.CreateDate = createDate;
            friendInvitation.IsDeleted = isDeleted;
            return friendInvitation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid InvitationID
        {
            get
            {
                return _InvitationID;
            }
            set
            {
                if (_InvitationID != value)
                {
                    OnInvitationIDChanging(value);
                    ReportPropertyChanging("InvitationID");
                    _InvitationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("InvitationID");
                    OnInvitationIDChanged();
                }
            }
        }
        private global::System.Guid _InvitationID;
        partial void OnInvitationIDChanging(global::System.Guid value);
        partial void OnInvitationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid FromID
        {
            get
            {
                return _FromID;
            }
            set
            {
                OnFromIDChanging(value);
                ReportPropertyChanging("FromID");
                _FromID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromID");
                OnFromIDChanged();
            }
        }
        private global::System.Guid _FromID;
        partial void OnFromIDChanging(global::System.Guid value);
        partial void OnFromIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ToID
        {
            get
            {
                return _ToID;
            }
            set
            {
                OnToIDChanging(value);
                ReportPropertyChanging("ToID");
                _ToID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToID");
                OnToIDChanged();
            }
        }
        private global::System.Guid _ToID;
        partial void OnToIDChanging(global::System.Guid value);
        partial void OnToIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Message
        {
            get
            {
                return _Message;
            }
            set
            {
                OnMessageChanging(value);
                ReportPropertyChanging("Message");
                _Message = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Message");
                OnMessageChanged();
            }
        }
        private global::System.String _Message;
        partial void OnMessageChanging(global::System.String value);
        partial void OnMessageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateDate
        {
            get
            {
                return _CreateDate;
            }
            set
            {
                OnCreateDateChanging(value);
                ReportPropertyChanging("CreateDate");
                _CreateDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreateDate");
                OnCreateDateChanged();
            }
        }
        private global::System.DateTime _CreateDate;
        partial void OnCreateDateChanging(global::System.DateTime value);
        partial void OnCreateDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_FriendInvitations_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_FriendInvitations_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_FriendInvitations_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_FriendInvitations_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_FriendInvitations_Users", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_FriendInvitations_Users1", "Users")]
        public User User1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_FriendInvitations_Users1", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_FriendInvitations_Users1", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> User1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_FriendInvitations_Users1", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_FriendInvitations_Users1", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="Message")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Message : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Message object.
        /// </summary>
        /// <param name="messageID">Initial value of the MessageID property.</param>
        /// <param name="fromID">Initial value of the FromID property.</param>
        /// <param name="toID">Initial value of the ToID property.</param>
        /// <param name="sendDate">Initial value of the SendDate property.</param>
        /// <param name="header">Initial value of the Header property.</param>
        /// <param name="text">Initial value of the Text property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        /// <param name="isDeletedBySender">Initial value of the IsDeletedBySender property.</param>
        /// <param name="isDeletedByReceiver">Initial value of the IsDeletedByReceiver property.</param>
        public static Message CreateMessage(global::System.Guid messageID, global::System.Guid fromID, global::System.Guid toID, global::System.DateTime sendDate, global::System.String header, global::System.String text, global::System.Boolean status, global::System.Boolean isDeletedBySender, global::System.Boolean isDeletedByReceiver)
        {
            Message message = new Message();
            message.MessageID = messageID;
            message.FromID = fromID;
            message.ToID = toID;
            message.SendDate = sendDate;
            message.Header = header;
            message.Text = text;
            message.Status = status;
            message.IsDeletedBySender = isDeletedBySender;
            message.IsDeletedByReceiver = isDeletedByReceiver;
            return message;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid MessageID
        {
            get
            {
                return _MessageID;
            }
            set
            {
                if (_MessageID != value)
                {
                    OnMessageIDChanging(value);
                    ReportPropertyChanging("MessageID");
                    _MessageID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MessageID");
                    OnMessageIDChanged();
                }
            }
        }
        private global::System.Guid _MessageID;
        partial void OnMessageIDChanging(global::System.Guid value);
        partial void OnMessageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid FromID
        {
            get
            {
                return _FromID;
            }
            set
            {
                OnFromIDChanging(value);
                ReportPropertyChanging("FromID");
                _FromID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromID");
                OnFromIDChanged();
            }
        }
        private global::System.Guid _FromID;
        partial void OnFromIDChanging(global::System.Guid value);
        partial void OnFromIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ToID
        {
            get
            {
                return _ToID;
            }
            set
            {
                OnToIDChanging(value);
                ReportPropertyChanging("ToID");
                _ToID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToID");
                OnToIDChanged();
            }
        }
        private global::System.Guid _ToID;
        partial void OnToIDChanging(global::System.Guid value);
        partial void OnToIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SendDate
        {
            get
            {
                return _SendDate;
            }
            set
            {
                OnSendDateChanging(value);
                ReportPropertyChanging("SendDate");
                _SendDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SendDate");
                OnSendDateChanged();
            }
        }
        private global::System.DateTime _SendDate;
        partial void OnSendDateChanging(global::System.DateTime value);
        partial void OnSendDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Header
        {
            get
            {
                return _Header;
            }
            set
            {
                OnHeaderChanging(value);
                ReportPropertyChanging("Header");
                _Header = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Header");
                OnHeaderChanged();
            }
        }
        private global::System.String _Header;
        partial void OnHeaderChanging(global::System.String value);
        partial void OnHeaderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Text
        {
            get
            {
                return _Text;
            }
            set
            {
                OnTextChanging(value);
                ReportPropertyChanging("Text");
                _Text = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Text");
                OnTextChanged();
            }
        }
        private global::System.String _Text;
        partial void OnTextChanging(global::System.String value);
        partial void OnTextChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Boolean _Status;
        partial void OnStatusChanging(global::System.Boolean value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeletedBySender
        {
            get
            {
                return _IsDeletedBySender;
            }
            set
            {
                OnIsDeletedBySenderChanging(value);
                ReportPropertyChanging("IsDeletedBySender");
                _IsDeletedBySender = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeletedBySender");
                OnIsDeletedBySenderChanged();
            }
        }
        private global::System.Boolean _IsDeletedBySender;
        partial void OnIsDeletedBySenderChanging(global::System.Boolean value);
        partial void OnIsDeletedBySenderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeletedByReceiver
        {
            get
            {
                return _IsDeletedByReceiver;
            }
            set
            {
                OnIsDeletedByReceiverChanging(value);
                ReportPropertyChanging("IsDeletedByReceiver");
                _IsDeletedByReceiver = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeletedByReceiver");
                OnIsDeletedByReceiverChanged();
            }
        }
        private global::System.Boolean _IsDeletedByReceiver;
        partial void OnIsDeletedByReceiverChanging(global::System.Boolean value);
        partial void OnIsDeletedByReceiverChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Messages_Users", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Messages_Users", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Messages_Users", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Messages_Users", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_Messages_Users", "User", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Messages_Users1", "User")]
        public User User1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Messages_Users1", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Messages_Users1", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> User1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Messages_Users1", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_Messages_Users1", "User", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="PersonalInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PersonalInfo : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PersonalInfo object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="userID">Initial value of the UserID property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="imagePath">Initial value of the ImagePath property.</param>
        public static PersonalInfo CreatePersonalInfo(global::System.Guid id, global::System.Guid userID, global::System.String firstName, global::System.String lastName, global::System.String imagePath)
        {
            PersonalInfo personalInfo = new PersonalInfo();
            personalInfo.ID = id;
            personalInfo.UserID = userID;
            personalInfo.FirstName = firstName;
            personalInfo.LastName = lastName;
            personalInfo.ImagePath = imagePath;
            return personalInfo;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private global::System.Guid _UserID;
        partial void OnUserIDChanging(global::System.Guid value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NickName
        {
            get
            {
                return _NickName;
            }
            set
            {
                OnNickNameChanging(value);
                ReportPropertyChanging("NickName");
                _NickName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NickName");
                OnNickNameChanged();
            }
        }
        private global::System.String _NickName;
        partial void OnNickNameChanging(global::System.String value);
        partial void OnNickNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> Sex
        {
            get
            {
                return _Sex;
            }
            set
            {
                OnSexChanging(value);
                ReportPropertyChanging("Sex");
                _Sex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Sex");
                OnSexChanged();
            }
        }
        private Nullable<global::System.Byte> _Sex;
        partial void OnSexChanging(Nullable<global::System.Byte> value);
        partial void OnSexChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Birthday
        {
            get
            {
                return _Birthday;
            }
            set
            {
                OnBirthdayChanging(value);
                ReportPropertyChanging("Birthday");
                _Birthday = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Birthday");
                OnBirthdayChanged();
            }
        }
        private Nullable<global::System.DateTime> _Birthday;
        partial void OnBirthdayChanging(Nullable<global::System.DateTime> value);
        partial void OnBirthdayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ImagePath
        {
            get
            {
                return _ImagePath;
            }
            set
            {
                OnImagePathChanging(value);
                ReportPropertyChanging("ImagePath");
                _ImagePath = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ImagePath");
                OnImagePathChanged();
            }
        }
        private global::System.String _ImagePath;
        partial void OnImagePathChanging(global::System.String value);
        partial void OnImagePathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Address_PersonalInfo", "Address")]
        public EntityCollection<Address> Addresses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Address>("SocialNetworkDBModel.FK_Address_PersonalInfo", "Address");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Address>("SocialNetworkDBModel.FK_Address_PersonalInfo", "Address", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_PersonalInfo_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_PersonalInfo_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_PersonalInfo_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_PersonalInfo_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_PersonalInfo_Users", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="Status")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Status : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Status object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="statusID">Initial value of the StatusID property.</param>
        /// <param name="userID">Initial value of the UserID property.</param>
        /// <param name="statusMessage">Initial value of the StatusMessage property.</param>
        /// <param name="setTime">Initial value of the SetTime property.</param>
        /// <param name="isSet">Initial value of the IsSet property.</param>
        /// <param name="isDeleted">Initial value of the IsDeleted property.</param>
        public static Status CreateStatus(global::System.Guid id, global::System.Int32 statusID, global::System.Guid userID, global::System.String statusMessage, global::System.DateTime setTime, global::System.Boolean isSet, global::System.Boolean isDeleted)
        {
            Status status = new Status();
            status.ID = id;
            status.StatusID = statusID;
            status.UserID = userID;
            status.StatusMessage = statusMessage;
            status.SetTime = setTime;
            status.IsSet = isSet;
            status.IsDeleted = isDeleted;
            return status;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatusID
        {
            get
            {
                return _StatusID;
            }
            set
            {
                OnStatusIDChanging(value);
                ReportPropertyChanging("StatusID");
                _StatusID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StatusID");
                OnStatusIDChanged();
            }
        }
        private global::System.Int32 _StatusID;
        partial void OnStatusIDChanging(global::System.Int32 value);
        partial void OnStatusIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private global::System.Guid _UserID;
        partial void OnUserIDChanging(global::System.Guid value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StatusMessage
        {
            get
            {
                return _StatusMessage;
            }
            set
            {
                OnStatusMessageChanging(value);
                ReportPropertyChanging("StatusMessage");
                _StatusMessage = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StatusMessage");
                OnStatusMessageChanged();
            }
        }
        private global::System.String _StatusMessage;
        partial void OnStatusMessageChanging(global::System.String value);
        partial void OnStatusMessageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SetTime
        {
            get
            {
                return _SetTime;
            }
            set
            {
                OnSetTimeChanging(value);
                ReportPropertyChanging("SetTime");
                _SetTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SetTime");
                OnSetTimeChanged();
            }
        }
        private global::System.DateTime _SetTime;
        partial void OnSetTimeChanging(global::System.DateTime value);
        partial void OnSetTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsSet
        {
            get
            {
                return _IsSet;
            }
            set
            {
                OnIsSetChanging(value);
                ReportPropertyChanging("IsSet");
                _IsSet = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsSet");
                OnIsSetChanged();
            }
        }
        private global::System.Boolean _IsSet;
        partial void OnIsSetChanging(global::System.Boolean value);
        partial void OnIsSetChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Status_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Status_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Status_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_Status_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_Status_Users", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="sysdiagram")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagram : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new sysdiagram object.
        /// </summary>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="principal_id">Initial value of the principal_id property.</param>
        /// <param name="diagram_id">Initial value of the diagram_id property.</param>
        public static sysdiagram Createsysdiagram(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagram sysdiagram = new sysdiagram();
            sysdiagram.name = name;
            sysdiagram.principal_id = principal_id;
            sysdiagram.diagram_id = diagram_id;
            return sysdiagram;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="userID">Initial value of the UserID property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="email">Initial value of the Email property.</param>
        /// <param name="registrationDate">Initial value of the RegistrationDate property.</param>
        /// <param name="lastLoginDate">Initial value of the LastLoginDate property.</param>
        /// <param name="isDeleted">Initial value of the IsDeleted property.</param>
        public static User CreateUser(global::System.Guid userID, global::System.String password, global::System.String email, global::System.DateTime registrationDate, global::System.DateTime lastLoginDate, global::System.Boolean isDeleted)
        {
            User user = new User();
            user.UserID = userID;
            user.Password = password;
            user.Email = email;
            user.RegistrationDate = registrationDate;
            user.LastLoginDate = lastLoginDate;
            user.IsDeleted = isDeleted;
            return user;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    OnUserIDChanging(value);
                    ReportPropertyChanging("UserID");
                    _UserID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        private global::System.Guid _UserID;
        partial void OnUserIDChanging(global::System.Guid value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SecretQuestionID
        {
            get
            {
                return _SecretQuestionID;
            }
            set
            {
                OnSecretQuestionIDChanging(value);
                ReportPropertyChanging("SecretQuestionID");
                _SecretQuestionID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SecretQuestionID");
                OnSecretQuestionIDChanged();
            }
        }
        private Nullable<global::System.Int32> _SecretQuestionID;
        partial void OnSecretQuestionIDChanging(Nullable<global::System.Int32> value);
        partial void OnSecretQuestionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecretResponse
        {
            get
            {
                return _SecretResponse;
            }
            set
            {
                OnSecretResponseChanging(value);
                ReportPropertyChanging("SecretResponse");
                _SecretResponse = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecretResponse");
                OnSecretResponseChanged();
            }
        }
        private global::System.String _SecretResponse;
        partial void OnSecretResponseChanging(global::System.String value);
        partial void OnSecretResponseChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime RegistrationDate
        {
            get
            {
                return _RegistrationDate;
            }
            set
            {
                OnRegistrationDateChanging(value);
                ReportPropertyChanging("RegistrationDate");
                _RegistrationDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RegistrationDate");
                OnRegistrationDateChanged();
            }
        }
        private global::System.DateTime _RegistrationDate;
        partial void OnRegistrationDateChanging(global::System.DateTime value);
        partial void OnRegistrationDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastLoginDate
        {
            get
            {
                return _LastLoginDate;
            }
            set
            {
                OnLastLoginDateChanging(value);
                ReportPropertyChanging("LastLoginDate");
                _LastLoginDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastLoginDate");
                OnLastLoginDateChanged();
            }
        }
        private global::System.DateTime _LastLoginDate;
        partial void OnLastLoginDateChanging(global::System.DateTime value);
        partial void OnLastLoginDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Bans_Users", "Bans")]
        public EntityCollection<Ban> Bans
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ban>("SocialNetworkDBModel.FK_Bans_Users", "Bans");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ban>("SocialNetworkDBModel.FK_Bans_Users", "Bans", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Bans_Users1", "Bans")]
        public EntityCollection<Ban> Bans1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ban>("SocialNetworkDBModel.FK_Bans_Users1", "Bans");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ban>("SocialNetworkDBModel.FK_Bans_Users1", "Bans", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_FriendInvitations_Users", "FriendInvitations")]
        public EntityCollection<FriendInvitation> FriendInvitations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FriendInvitation>("SocialNetworkDBModel.FK_FriendInvitations_Users", "FriendInvitations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FriendInvitation>("SocialNetworkDBModel.FK_FriendInvitations_Users", "FriendInvitations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_FriendInvitations_Users1", "FriendInvitations")]
        public EntityCollection<FriendInvitation> FriendInvitations1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FriendInvitation>("SocialNetworkDBModel.FK_FriendInvitations_Users1", "FriendInvitations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FriendInvitation>("SocialNetworkDBModel.FK_FriendInvitations_Users1", "FriendInvitations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Friends_Users", "Friends")]
        public EntityCollection<Friend> Friends
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Friend>("SocialNetworkDBModel.FK_Friends_Users", "Friends");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Friend>("SocialNetworkDBModel.FK_Friends_Users", "Friends", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Friends_Users1", "Friends")]
        public EntityCollection<Friend> Friends1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Friend>("SocialNetworkDBModel.FK_Friends_Users1", "Friends");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Friend>("SocialNetworkDBModel.FK_Friends_Users1", "Friends", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_PersonalInfo_Users", "PersonalInfo")]
        public EntityCollection<PersonalInfo> PersonalInfoes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonalInfo>("SocialNetworkDBModel.FK_PersonalInfo_Users", "PersonalInfo");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonalInfo>("SocialNetworkDBModel.FK_PersonalInfo_Users", "PersonalInfo", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Status_Users", "Status")]
        public EntityCollection<Status> Status
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Status>("SocialNetworkDBModel.FK_Status_Users", "Status");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Status>("SocialNetworkDBModel.FK_Status_Users", "Status", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_UsersXUserRoles_Users", "UsersXUserRoles")]
        public EntityCollection<UsersXUserRole> UsersXUserRoles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UsersXUserRole>("SocialNetworkDBModel.FK_UsersXUserRoles_Users", "UsersXUserRoles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UsersXUserRole>("SocialNetworkDBModel.FK_UsersXUserRoles_Users", "UsersXUserRoles", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_WallBoardItems_Users", "WallBoardItems")]
        public EntityCollection<WallBoardItem> WallBoardItems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WallBoardItem>("SocialNetworkDBModel.FK_WallBoardItems_Users", "WallBoardItems");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WallBoardItem>("SocialNetworkDBModel.FK_WallBoardItems_Users", "WallBoardItems", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_WallBoardItems_Users1", "WallBoardItems")]
        public EntityCollection<WallBoardItem> WallBoardItems1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WallBoardItem>("SocialNetworkDBModel.FK_WallBoardItems_Users1", "WallBoardItems");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WallBoardItem>("SocialNetworkDBModel.FK_WallBoardItems_Users1", "WallBoardItems", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Messages_Users", "Message")]
        public EntityCollection<Message> Messages
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Message>("SocialNetworkDBModel.FK_Messages_Users", "Message");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Message>("SocialNetworkDBModel.FK_Messages_Users", "Message", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_Messages_Users1", "Message")]
        public EntityCollection<Message> Messages1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Message>("SocialNetworkDBModel.FK_Messages_Users1", "Message");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Message>("SocialNetworkDBModel.FK_Messages_Users1", "Message", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="UserRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserRole : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserRole object.
        /// </summary>
        /// <param name="userRoleID">Initial value of the UserRoleID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="privilegeMask">Initial value of the PrivilegeMask property.</param>
        public static UserRole CreateUserRole(global::System.Guid userRoleID, global::System.String name, global::System.Byte privilegeMask)
        {
            UserRole userRole = new UserRole();
            userRole.UserRoleID = userRoleID;
            userRole.Name = name;
            userRole.PrivilegeMask = privilegeMask;
            return userRole;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserRoleID
        {
            get
            {
                return _UserRoleID;
            }
            set
            {
                if (_UserRoleID != value)
                {
                    OnUserRoleIDChanging(value);
                    ReportPropertyChanging("UserRoleID");
                    _UserRoleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserRoleID");
                    OnUserRoleIDChanged();
                }
            }
        }
        private global::System.Guid _UserRoleID;
        partial void OnUserRoleIDChanging(global::System.Guid value);
        partial void OnUserRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte PrivilegeMask
        {
            get
            {
                return _PrivilegeMask;
            }
            set
            {
                OnPrivilegeMaskChanging(value);
                ReportPropertyChanging("PrivilegeMask");
                _PrivilegeMask = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PrivilegeMask");
                OnPrivilegeMaskChanged();
            }
        }
        private global::System.Byte _PrivilegeMask;
        partial void OnPrivilegeMaskChanging(global::System.Byte value);
        partial void OnPrivilegeMaskChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_UsersXUserRoles_UserRoles", "UsersXUserRoles")]
        public EntityCollection<UsersXUserRole> UsersXUserRoles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UsersXUserRole>("SocialNetworkDBModel.FK_UsersXUserRoles_UserRoles", "UsersXUserRoles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UsersXUserRole>("SocialNetworkDBModel.FK_UsersXUserRoles_UserRoles", "UsersXUserRoles", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="UsersXUserRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UsersXUserRole : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UsersXUserRole object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        public static UsersXUserRole CreateUsersXUserRole(global::System.Guid id)
        {
            UsersXUserRole usersXUserRole = new UsersXUserRole();
            usersXUserRole.ID = id;
            return usersXUserRole;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private Nullable<global::System.Guid> _UserID;
        partial void OnUserIDChanging(Nullable<global::System.Guid> value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> UserRoleID
        {
            get
            {
                return _UserRoleID;
            }
            set
            {
                OnUserRoleIDChanging(value);
                ReportPropertyChanging("UserRoleID");
                _UserRoleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserRoleID");
                OnUserRoleIDChanged();
            }
        }
        private Nullable<global::System.Guid> _UserRoleID;
        partial void OnUserRoleIDChanging(Nullable<global::System.Guid> value);
        partial void OnUserRoleIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_UsersXUserRoles_UserRoles", "UserRoles")]
        public UserRole UserRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRole>("SocialNetworkDBModel.FK_UsersXUserRoles_UserRoles", "UserRoles").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRole>("SocialNetworkDBModel.FK_UsersXUserRoles_UserRoles", "UserRoles").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserRole> UserRoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRole>("SocialNetworkDBModel.FK_UsersXUserRoles_UserRoles", "UserRoles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserRole>("SocialNetworkDBModel.FK_UsersXUserRoles_UserRoles", "UserRoles", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_UsersXUserRoles_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_UsersXUserRoles_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_UsersXUserRoles_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_UsersXUserRoles_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_UsersXUserRoles_Users", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SocialNetworkDBModel", Name="WallBoardItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WallBoardItem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WallBoardItem object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="contentTypeID">Initial value of the ContentTypeID property.</param>
        /// <param name="fromID">Initial value of the FromID property.</param>
        /// <param name="toID">Initial value of the ToID property.</param>
        /// <param name="sendDate">Initial value of the SendDate property.</param>
        /// <param name="message">Initial value of the Message property.</param>
        /// <param name="isDeleted">Initial value of the IsDeleted property.</param>
        public static WallBoardItem CreateWallBoardItem(global::System.Guid id, global::System.Int32 contentTypeID, global::System.Guid fromID, global::System.Guid toID, global::System.DateTime sendDate, global::System.String message, global::System.Boolean isDeleted)
        {
            WallBoardItem wallBoardItem = new WallBoardItem();
            wallBoardItem.ID = id;
            wallBoardItem.ContentTypeID = contentTypeID;
            wallBoardItem.FromID = fromID;
            wallBoardItem.ToID = toID;
            wallBoardItem.SendDate = sendDate;
            wallBoardItem.Message = message;
            wallBoardItem.IsDeleted = isDeleted;
            return wallBoardItem;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ContentTypeID
        {
            get
            {
                return _ContentTypeID;
            }
            set
            {
                OnContentTypeIDChanging(value);
                ReportPropertyChanging("ContentTypeID");
                _ContentTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContentTypeID");
                OnContentTypeIDChanged();
            }
        }
        private global::System.Int32 _ContentTypeID;
        partial void OnContentTypeIDChanging(global::System.Int32 value);
        partial void OnContentTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid FromID
        {
            get
            {
                return _FromID;
            }
            set
            {
                OnFromIDChanging(value);
                ReportPropertyChanging("FromID");
                _FromID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromID");
                OnFromIDChanged();
            }
        }
        private global::System.Guid _FromID;
        partial void OnFromIDChanging(global::System.Guid value);
        partial void OnFromIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ToID
        {
            get
            {
                return _ToID;
            }
            set
            {
                OnToIDChanging(value);
                ReportPropertyChanging("ToID");
                _ToID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToID");
                OnToIDChanged();
            }
        }
        private global::System.Guid _ToID;
        partial void OnToIDChanging(global::System.Guid value);
        partial void OnToIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SendDate
        {
            get
            {
                return _SendDate;
            }
            set
            {
                OnSendDateChanging(value);
                ReportPropertyChanging("SendDate");
                _SendDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SendDate");
                OnSendDateChanged();
            }
        }
        private global::System.DateTime _SendDate;
        partial void OnSendDateChanging(global::System.DateTime value);
        partial void OnSendDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Message
        {
            get
            {
                return _Message;
            }
            set
            {
                OnMessageChanging(value);
                ReportPropertyChanging("Message");
                _Message = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Message");
                OnMessageChanged();
            }
        }
        private global::System.String _Message;
        partial void OnMessageChanging(global::System.String value);
        partial void OnMessageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDeleted
        {
            get
            {
                return _IsDeleted;
            }
            set
            {
                OnIsDeletedChanging(value);
                ReportPropertyChanging("IsDeleted");
                _IsDeleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDeleted");
                OnIsDeletedChanged();
            }
        }
        private global::System.Boolean _IsDeleted;
        partial void OnIsDeletedChanging(global::System.Boolean value);
        partial void OnIsDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> NullLink
        {
            get
            {
                return _NullLink;
            }
            set
            {
                OnNullLinkChanging(value);
                ReportPropertyChanging("NullLink");
                _NullLink = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NullLink");
                OnNullLinkChanged();
            }
        }
        private Nullable<global::System.Int32> _NullLink;
        partial void OnNullLinkChanging(Nullable<global::System.Int32> value);
        partial void OnNullLinkChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_WallBoardItems_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_WallBoardItems_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_WallBoardItems_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_WallBoardItems_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_WallBoardItems_Users", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SocialNetworkDBModel", "FK_WallBoardItems_Users1", "Users")]
        public User User1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_WallBoardItems_Users1", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_WallBoardItems_Users1", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> User1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SocialNetworkDBModel.FK_WallBoardItems_Users1", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SocialNetworkDBModel.FK_WallBoardItems_Users1", "Users", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
